{
  "Styled_Component": {
    "prefix": "fabric-styled",
    "body": [
      "import { styled } from '../../Utilities';",
      "import {",
      "  I${1:Component}Props,",
      "  I${1:Component}StyleProps,",
      "  I${1:Component}Styles",
      "} from './${1:Component}.types';",
      "import { ${1:Component}Base } from './${1:Component}.base';",
      "import { getStyles } from './${1:Component}.styles';",
      "",
      "/**",
      "* Insert short {1:Component} description",
      "*/",
      "export const ${1:Component} = styled<I${1:Component}Props, I${1:Component}StyleProps, I${1:Component}Styles>(",
      "  ${1:Component}Base,",
      "  getStyles",
      ");"
    ],
    "description": "Component with mergeStyles"
  },
  "classNamesFunction": {
    "prefix": "fabric-getClassNames",
    "body": [
      "import {",
      "  I${1:Component}StyleProps,",
      "  I${1:Component}Styles,",
      "} from  './${1:Component}.types';",
      "import {",
      "  classNamesFunction,",
      "  customizable,",
      "} from '../../Utilities';",
      "",
      "const getClassNames = classNamesFunction<I${1:Component}StyleProps, I${1:Component}Styles>();",
      "",
      "// Move below lines to the line before ${1:Component}Base class.",
      "/**",
      "* {1:Component} with no default styles.",
      "* [Use the `getStyles` API to add your own styles.](https://github.com/OfficeDev/office-ui-fabric-react/wiki/Styling)",
      "*/",
      "@customizable('${1:Component}', ['theme'])"
    ],
    "description": "getClassNames function to convert classNames to strings."
  },
  "classNamesConst": {
    "prefix": "fabric-classNamesConst",
    "body": [
      "const { getStyles, theme } = this.props;",
      "const classNames = getClassNames(getStyles, {",
      "  theme: theme!,",
      "  className,",
      "  // Other style props",
      "  ${1}",
      "});"
    ],
    "description": "Deconstruct getStyles and theme from props, and create classNames object for use in Render functions. Pass an object of style props as an argument."
  }
}