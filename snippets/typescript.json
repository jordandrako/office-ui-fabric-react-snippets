{
  "Scaffolds a Component.types.ts file.": {
    "prefix": "fabric-componentTypes",
    "body": [
      "import * as React from 'react';",
      "import { ${1:ComponentName}Base } from './${1:ComponentName}.base';",
      "import { IStyle, ITheme } from '../../Styling';",
      "import { IStyleFunction } from '../../Utilities';",
      "",
      "export interface I${1:ComponentName} {",
      "  focus: () => void;",
      "}",
      "",
      "export interface I${1:ComponentName}Props extends React.Props<${1:ComponentName}Base> {",
      "  /**",
      "   * Gets the component ref.",
      "   */",
      "  componentRef?: (componentRef: I${1:ComponentName}Props) => void;",
      "",
      "  /**",
      "   * Call to provide customized styling that will layer on top of the variant rules.",
      "   */",
      "  getStyles?: IStyleFunction<I${1:ComponentName}StyleProps, I${1:ComponentName}Styles>;",
      "",
      "  /**",
      "   * Theme provided by High-Order Component.",
      "   */",
      "  theme?: ITheme;",
      "",
      "  /**",
      "   * Additional css class to apply to the ${1:ComponentName}",
      "   * @defaultvalue undefined",
      "   */",
      "  className?: string;",
      "",
      "  // Insert ${1:ComponentName} props below",
      "}",
      "",
      "export interface I${1:ComponentName}StyleProps {",
      "  /**",
      "   * Theme provided by High-Order Component.",
      "   */",
      "  theme: ITheme;",
      "",
      "  /**",
      "   * Accept custom classNames",
      "   */",
      "  className?: string;",
      "",
      "  // Insert ${1:ComponentName} style props below",
      "}",
      "",
      "export interface I${1:ComponentName}Styles {",
      "  /**",
      "   * Style for the root element.",
      "   */",
      "  root: IStyle;",
      "",
      "  // Insert ${1:ComponentName} classNames below",
      "}"
    ],
    "description": "Scaffolds a Component.types.ts file."
  },
  "Scaffolds a Component.styles.ts file.": {
    "prefix": "fabric-getStyles",
    "body": [
      "import { I${1:ComponentName}StyleProps, I${1:ComponentName}Styles } from './${1:ComponentName}.types';",
      "import {",
      "  IStyle,",
      "  ITheme,",
      "} from '../../Styling';",
      "",
      "export const getStyles = (",
      "  props: I${1:ComponentName}StyleProps",
      "): I${1:ComponentName}Styles => {",
      "  const {",
      "    className,",
      "    theme,",
      "  } = props;",
      "",
      "  const { palette, semanticColors } = theme;",
      "",
      "  return ({",
      "    root: [",
      "      'ms-${1:ComponentName}',",
      "      {",
      "        // Insert css properties",
      "      },",
      "      className",
      "    ],",
      "",
      "    // Insert className styles",
      "  });",
      "};"
    ],
    "description": "Scaffolds a Component.styles.ts file."
  }
}